Purpose

To remove the need to manage .fixtures.yml files in every puppet module manually. This manual management of .fixtures.yml will lead to a broken puppet environment.
Problem Scenario

Let A be a module with a dependency B.
A has recently been updated, and it is working. The rspec tests are passing when using module B version 2.1.0, which is the version defined in .fixtures.yml; this is also the version in the current Puppetfile.
We tag A with version 1.1.0
Everything works great for 2 months.
Module B is updated to perform new tasks, and a release 3.0.0 is tagged, which introduces new variables and removed old ones.
All tests are working well.
Puppetfile is updated to use Module B version 3.0.0
All spec tests pass in the module build environment.
Module B version 3.0.0 is added to the production Puppetfile
All subsequent puppet runs fail.
What went wrong?

Since all of the rspec tests in Module A are tested against the versions of each module defined in .fixtures.yml, then unless fixtures.yml is kept absolutely up to date, then the automated testing via jenkins will not reflect the actual environment. Furthermore, unless all modules are tested for every change to the Puppetfile, we cannot be certain that all current master branches are functional and passing their tests.
Solution

We already have a large .fixtures.yml file which defines the various environments: qa, staging, production, etc. This is the purpose of the Puppetfile. If we reference the puppetfile for module information when running rspec tests, then we will always be testing against the proper version of the modules. The Gemfile and Rakefile modifications below will cause all entries in fixtures to be checked out via the module definition in the Puppetfile. Any modules which cannot be found in the puppetfile are feteched using the regular .fixtures.yml functionality.

We should also modify jenkins so that a change to the Puppetfile master branch triggers a rebuild of every module. This should also catch the scenario where a change to a dependency breaks a module.
Further Improvements

The current method still requires dependencies to be listed within .fixtures.yml. Hopefully further refinements can be made to remove these following fixtures.yaml dependencies:

    .fixtures.yml defines which modules are dependencies for the current module.
        Elegant solution: If the spec_prep step can determine dependencies, then this functionality would be deprecated.
        Brute-force solution: Put every module from Puppetfile into the spec/fixtures/modules directory. As long as all dependencies are listed within Puppetfile (they should be), then this functionality would be deprecated.
    .fixtures.yml defines the local symlink dependencies
        Since this MIGHT include a development version of a Puppetfile module, I can't really deprecate this functionality.

Fixtures Changes

In order for these changes to work, no changes to the .fixtures.yml are required. However, I recommend adding 'Puppetfile' as the repository source, for easier understanding later on.

The fixtures file is processed in this way:

    Symlinks are processed first, and they take precedence (i.e. - if a module is listed in both fixtures and symlinks, the symlinks will be created and the repositories entry will be ignored.)
    The latest Puppetfile is cloned, and we look for each module's entry within the Puppetfile.
        If the module is found in the Puppetfile, it is used regardless of what repo .fixtures.yml indicates.
        If the module is not found in the Puppetfile, then the repo and branch/tag listed in .fixtures.yaml will be cloned normally.

Old Fixtures File
fixtures:
 repositories:
   stdlib:
     repo: 'https://github.com/puppetlabs/puppetlabs-stdlib.git',
     ref: '4.5.1'
   zookeeper: 'git@gitlab.addsrv.com:puppet_foreman/zookeeper.git'
   yumclient: 'git@gitlab.addsrv.com:puppet_foreman/yumclient.git'
   epel:
     repo: 'https://github.com/stahnma/puppet-module-epel.git'
     ref: '1.0.2'
   java:
     repo: 'git://github.com/puppetlabs/puppetlabs-java'
     ref: '1.3.0'
 symlinks:
   zookeeper/manifests: "../../../../manifests"
   zookeeper/templates: "../../../../templates"
New Fixtures File (Comments added for clarity)
fixtures:
  repositories:
    # For clarity, I recommend that we change the repo entry to "Puppetfile"
    stdlib: 'Puppetfile'
    zookeeper: 'Puppetfile'
    # If yumclient exists in the Puppetfile, the repo listed here will be ignored.
    yumclient: 'git@gitlab.addsrv.com:puppet_foreman/yumclient.git'
    # If a repo is not found in the Puppetfile, then the repo will be cloned from the indicated repo branch/tag.
    epel:
      repo: 'https://github.com/stahnma/puppet-module-epel.git'
      ref: '1.0.2'
    java:
      repo: 'git://github.com/puppetlabs/puppetlabs-java'
      ref: '1.3.0'
# Symlinks are processed normally.
## This is required, since we're testing local changes to at least this module.
## If testing changes to this module and a dependency, add symlink references for that dependent module.
  symlinks:
    zookeeper/manifests: "../../../../manifests"
    zookeeper/templates: "../../../../templates"
    dependent_module/manifests: "../../../../../dependent_module/manifests"
    dependent_module/templates: "../../../../../dependent_module/templates"

 
Code Changes

Add to .gitignore
Puppetfile

 

PATCH â€“ run with `patch -p1 < magnum.patch` from within your module directory.

Add to Gemfile:
gem 'librarian-puppet-simple', '~> 0.0.3'

 

Append to Rakefile:
Rake::Task[:spec_prep].clear
desc "Create the fixtures directory"
task :spec_prep do
  # Create the required directories and site.pp file
  FileUtils::mkdir_p("spec/fixtures/modules")
  FileUtils::mkdir_p("spec/fixtures/manifests")
  FileUtils::touch("spec/fixtures/manifests/site.pp")
 
  # First, set up the symlinks that we need (this always includes myself)
  fixtures("symlinks").each do |source, target|
    File::exists?(File::dirname(target)) || FileUtils::mkdir(File::dirname(target))
    File::exists?(target) || FileUtils::ln_sf(source, target)
  end
 
  # Pull the latest puppetfile, and cull it to include only the fixtures defined modules
  sh "git archive --remote=git@gitlab.addsrv.com:puppet_foreman/puppetfile.git HEAD Puppetfile | tar -x"
 
  # Create repos var containing only the modules that we actually need.
  repos = []
  yaml_content = YAML::load_file("./.fixtures.yml")
  # If there's a list that I can iterate through, then do that.
  if yaml_content['fixtures']['repositories'].is_a? Enumerable
    yaml_content['fixtures']['repositories'].each do |module_name,src|
      repos << module_name
    end
 
    # Loop through fixtures to keep only the modules that are required.
    new_pup = File::open("Puppetfile.new","w")
    valid_module = false
    old_pup = File::open("Puppetfile","r")
    old_pup.each_line do |line|
      if m = line.match("^mod '(.+)'")
        valid_module = false
        if repos.include? m[1]
          valid_module = true
          new_pup.puts(line)
        end
      elsif valid_module ? new_pup.puts(line) : nil
      end
    end
    old_pup.close
    new_pup.close
    File::rename("./Puppetfile.new","Puppetfile")
    sh "librarian-puppet install --path=spec/fixtures/modules"
 
    # Check for any missing folders. If anything is missing then actually pull it down the old fashioned way.
    fixtures("repositories").each do |remote, opts|
      scm = 'git'
      if opts.instance_of?(String)
        target = opts
      elsif opts.instance_of?(Hash)
        target = opts["target"]
        ref = opts["ref"]
        scm = opts["scm"] if opts["scm"]
        branch = opts["branch"] if opts["branch"]
      end
 
      unless File::exists?(target) || clone_repo(scm, remote, target, ref, branch)
        fail "Failed to clone #{scm} repository #{remote} into #{target}"
      end
      revision(scm, target, ref) if ref
    end
  end
end
 
Rake::Task[:spec_clean].clear
desc "Clean up the fixtures directory"
task :spec_clean do
  sh "librarian-puppet clean --path=spec/fixtures/modules"
  if File.zero?("spec/fixtures/manifests/site.pp")
    FileUtils::rm_f("spec/fixtures/manifests/site.pp")
  end
end
